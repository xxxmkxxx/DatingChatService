plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.openapi.generator'  version "7.10.0"
}

group = 'com.dating.chat'
version = '0.0.1-SNAPSHOT'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

ext {
    openApiSpecificationPath = "$rootDir/src/main/resources/openApi/openapi.yml".replace("\\", "/")
    openApiGeneratedDirPath = "$rootDir/build/generated".replace("\\", "/")
    openApiTemplateDirPath = "$rootDir/src/main/resources/openApi/templates".replace("\\", "/")
    openApiSrcDirPath = "$rootDir/build/generated/src/main/java".replace("\\", "/")
    openApiCustomMustacheConfigPath = "$rootDir/src/main/resources/openApi/customMustacheConfig.js".replace("\\", "/")
    swaggerVersion = "2.2.0"
    javaxAnnotationVersion = "1.3.2"
    javaxValidationVersion = "2.0.1.Final"
    javaxServletVersion = "4.0.1"
    jacksonDatabindVersion = "0.2.6"
    jjwtVersion = "0.12.6"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'

    runtimeOnly 'org.postgresql:postgresql'

    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: "${swaggerVersion}"

    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: "${jjwtVersion}"
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: "${jjwtVersion}"
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: "${jjwtVersion}"

    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: "${javaxAnnotationVersion}"
    implementation group: 'javax.validation', name: 'validation-api', version: "${javaxValidationVersion}"
    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: "${javaxServletVersion}"

    implementation group: 'org.openapitools', name: 'jackson-databind-nullable', version: "${jacksonDatabindVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-websocket'
}

test {
    useJUnitPlatform()
}

openApiGenerate {
    generatorName.set("spring")
    inputSpec.set("${openApiSpecificationPath}")
    outputDir.set("${openApiGeneratedDirPath}")
    templateDir.set("${openApiTemplateDirPath}")
    apiPackage.set("com.dating.chat.api")
    modelPackage.set("com.dating.chat.api.dto")
    configOptions = [
            interfaceOnly: "true",
            useTags: "true",
            skipDefaultInterface: "true",
            mustacheConfig: "${openApiCustomMustacheConfigPath}"
    ]
}

tasks.register('postProcessOpenApiGeneratedCode') {
    doLast {
        def generatedDir = file("${openApiGeneratedDirPath}")
        generatedDir.eachFileRecurse { file ->
            if (file.name.endsWith('.java')) {
                def content = file.getText('UTF-8')

                content = content.replaceAll(/<const>(.*?)<\/const>/) { match, word ->
                    def snakeCase = word
                            .replaceAll(/([a-z])([A-Z])/, '$1_$2')
                            .replaceAll(/[\s\-]/, '_')
                            .toUpperCase()
                    snakeCase
                }

                file.setText(content, 'UTF-8')
            }
        }
    }
}

tasks.openApiGenerate.finalizedBy(postProcessOpenApiGeneratedCode)
compileJava.dependsOn(tasks.openApiGenerate)

sourceSets {
    getByName("main") {
        java {
            srcDir("${openApiSrcDirPath}")
        }
    }
}